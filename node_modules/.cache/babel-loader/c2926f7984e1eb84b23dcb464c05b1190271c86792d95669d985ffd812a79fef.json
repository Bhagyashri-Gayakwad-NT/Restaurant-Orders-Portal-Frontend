{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\ReactJs\\\\restaurant-orders-portal-frontened\\\\src\\\\components\\\\ViewFoodItem.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './ViewFoodItem.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewFoodItem = () => {\n  _s();\n  const [restaurants, setRestaurants] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [foodItems, setFoodItems] = useState([]);\n  const [selectedRestaurantName, setSelectedRestaurantName] = useState(''); // Store selected restaurant name\n  const [selectedRestaurantId, setSelectedRestaurantId] = useState(''); // This will hold the ID after finding it based on name\n  const [selectedCategoryId, setSelectedCategoryId] = useState('');\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [newFoodItem, setNewFoodItem] = useState({\n    foodItemName: '',\n    description: '',\n    price: '',\n    isAvailable: false\n  });\n  const userId = localStorage.getItem('userId');\n\n  // Fetch restaurants by userId\n  useEffect(() => {\n    if (userId) {\n      setLoading(true);\n      axios.get(`http://localhost:300/restaurant/restaurants/${userId}`).then(response => {\n        setRestaurants(response.data);\n        setLoading(false);\n      }).catch(error => {\n        console.error(\"Error fetching restaurants!\", error);\n        setError(\"Failed to load restaurants.\");\n        setLoading(false);\n      });\n    }\n  }, [userId]);\n\n  // Find restaurantId based on restaurantName\n  useEffect(() => {\n    if (selectedRestaurantName) {\n      const selectedRestaurant = restaurants.find(restaurant => restaurant.restaurantName === selectedRestaurantName);\n      if (selectedRestaurant) {\n        setSelectedRestaurantId(selectedRestaurant.id);\n      } else {\n        setSelectedRestaurantId('');\n        setCategories([]);\n      }\n    }\n  }, [selectedRestaurantName, restaurants]);\n\n  // Fetch categories by restaurant ID after finding the correct restaurantId\n  useEffect(() => {\n    if (selectedRestaurantId) {\n      setLoading(true);\n      axios.get(`http://localhost:300/categories/foodCategoryByRestaurantId/${selectedRestaurantId}`).then(response => {\n        setCategories(response.data);\n        setLoading(false);\n      }).catch(error => {\n        console.error(\"Error fetching categories!\", error);\n        setError(\"Failed to load categories.\");\n        setLoading(false);\n      });\n    }\n  }, [selectedRestaurantId]);\n\n  // Fetch food items by categoryId when category is selected\n  useEffect(() => {\n    if (selectedCategoryId) {\n      setLoading(true);\n      axios.get(`http://localhost:300/foodItems/foodItemsByCategoryId/${selectedCategoryId}`).then(response => {\n        setFoodItems(response.data);\n        setLoading(false);\n      }).catch(error => {\n        console.error(\"Error fetching food items!\", error);\n        setError(\"Failed to load food items.\");\n        setLoading(false);\n      });\n    }\n  }, [selectedCategoryId]);\n\n  // Handle input change for the new food item\n  const handleFoodItemChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setNewFoodItem(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Submit new food item\n  const handleAddFoodItem = e => {\n    e.preventDefault();\n    const foodItemData = {\n      ...newFoodItem,\n      categoryId: parseInt(selectedCategoryId),\n      restaurantId: parseInt(selectedRestaurantId)\n    };\n    axios.post('http://localhost:300/foodItems/add', foodItemData).then(response => {\n      setFoodItems([...foodItems, response.data]);\n      // Reset the form after successful submission\n      setNewFoodItem({\n        foodItemName: '',\n        description: '',\n        price: '',\n        isAvailable: false\n      });\n      setError(null);\n    }).catch(error => {\n      console.error(\"Error adding food item!\", error);\n      setError(\"Failed to add food item.\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"view-food-item-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"View and Add Food Items\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"restaurant\",\n        children: \"Select Restaurant:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"restaurant\",\n        value: selectedRestaurantName,\n        onChange: e => {\n          setSelectedRestaurantName(e.target.value);\n          setSelectedCategoryId(''); // Reset category when restaurant changes\n          setCategories([]);\n          setFoodItems([]);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Select Restaurant --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), restaurants.map(restaurant => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: restaurant.restaurantName,\n          children: restaurant.restaurantName\n        }, restaurant.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), selectedRestaurantId && categories.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"category\",\n        children: \"Select Category:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"category\",\n        value: selectedCategoryId,\n        onChange: e => {\n          setSelectedCategoryId(e.target.value);\n          setFoodItems([]); // Reset food items when category changes\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Select Category --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this), categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: category.id,\n          children: category.categoryName\n        }, category.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }, this), selectedCategoryId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"food-items-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Food Items\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this), foodItems.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: foodItems.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: item.foodItemName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 19\n          }, this), \" - \", item.description, \" - $\", item.price]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No food items available for this category.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, this), selectedCategoryId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-food-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Add New Food Item\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleAddFoodItem,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Food Item Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"foodItemName\",\n            value: newFoodItem.foodItemName,\n            onChange: handleFoodItemChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Description:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"description\",\n            value: newFoodItem.description,\n            onChange: handleFoodItemChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Price:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"price\",\n            value: newFoodItem.price,\n            onChange: handleFoodItemChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Is Available:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            name: \"isAvailable\",\n            checked: newFoodItem.isAvailable,\n            onChange: e => setNewFoodItem(prev => ({\n              ...prev,\n              isAvailable: e.target.checked\n            }))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add Food Item\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(ViewFoodItem, \"feMOhHaHhCveh3AY+/IRFqVpHRc=\");\n_c = ViewFoodItem;\nexport default ViewFoodItem;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './ViewFoodItem.css';\n\n// const ViewFoodItem = () => {\n//   const [restaurants, setRestaurants] = useState([]);\n//   const [categories, setCategories] = useState([]);\n//   const [foodItems, setFoodItems] = useState([]);\n//   const [selectedRestaurantId, setSelectedRestaurantId] = useState('');\n//   const [selectedCategoryId, setSelectedCategoryId] = useState('');\n//   const [error, setError] = useState(null);\n//   const [loading, setLoading] = useState(false);\n\n//   const [newFoodItem, setNewFoodItem] = useState({\n//     foodItemName: '',\n//     description: '',\n//     price: '',\n//     isAvailable: false,\n//   });\n\n//   const userId = localStorage.getItem('userId');\n\n//   // Fetch restaurants by userId\n//   useEffect(() => {\n//     if (userId) {\n//       setLoading(true);\n//       axios\n//         .get(`http://localhost:300/restaurant/restaurants/${userId}`)\n//         .then((response) => {\n//           setRestaurants(response.data);\n//           setLoading(false);\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching restaurants!\", error);\n//           setError(\"Failed to load restaurants.\");\n//           setLoading(false);\n//         });\n//     }\n//   }, [userId]);\n\n//   // Fetch categories by restaurant ID\n//   useEffect(() => {\n//     if (selectedRestaurantId) {\n//       setLoading(true);\n//       axios\n//         .get(`http://localhost:300/categories/foodCategoryByRestaurantId/${selectedRestaurantId}`)\n//         .then((response) => {\n//           setCategories(response.data);\n//           setLoading(false);\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching categories!\", error);\n//           setError(\"Failed to load categories.\");\n//           setLoading(false);\n//         });\n//     }\n//   }, [selectedRestaurantId]);\n\n//   // Fetch food items by category ID\n//   useEffect(() => {\n//     if (selectedCategoryId) {\n//       setLoading(true);\n//       axios\n//         .get(`http://localhost:300/foodItems/${selectedCategoryId}`)\n//         .then((response) => {\n//           setFoodItems(response.data);\n//           setLoading(false);\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching food items!\", error);\n//           setError(\"Failed to load food items.\");\n//           setLoading(false);\n//         });\n//     }\n//   }, [selectedCategoryId]);\n\n//   // Handle input change for the new food item\n//   const handleFoodItemChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewFoodItem((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Submit new food item\n//   const handleAddFoodItem = (e) => {\n//     e.preventDefault();\n//     const foodItemData = {\n//       ...newFoodItem,\n//       categoryId: parseInt(selectedCategoryId),\n//       restaurantId: parseInt(selectedRestaurantId),\n//     };\n\n//     axios\n//       .post('http://localhost:300/foodItems/add', foodItemData)\n//       .then((response) => {\n//         setFoodItems([...foodItems, response.data]);\n//         // Reset the form after successful submission\n//         setNewFoodItem({\n//           foodItemName: '',\n//           description: '',\n//           price: '',\n//           isAvailable: false,\n//         });\n//         setError(null);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error adding food item!\", error);\n//         setError(\"Failed to add food item.\");\n//       });\n//   };\n\n//   return (\n//     <div className=\"view-food-item-container\">\n//       <h2>View and Add Food Items</h2>\n\n//       {loading && <p>Loading...</p>}\n//       {error && <div className=\"error-message\">{error}</div>}\n\n//       {/* Restaurant Dropdown */}\n//       <div className=\"dropdown\">\n//         <label htmlFor=\"restaurant\">Select Restaurant:</label>\n//         <select\n//           id=\"restaurant\"\n//           value={selectedRestaurantId}\n//           onChange={(e) => {\n//             setSelectedRestaurantId(e.target.value);\n//             setSelectedCategoryId(''); // Reset category when restaurant changes\n//             setCategories([]);\n//             setFoodItems([]);\n//           }}\n//         >\n//           <option value=\"\">-- Select Restaurant --</option>\n//           {restaurants.map((restaurant) => (\n//             <option key={restaurant.id} value={restaurant.id}>\n//               {restaurant.restaurantName}\n//             </option>\n//           ))}\n//         </select>\n//       </div>\n\n//       {/* Category Dropdown */}\n//       {selectedRestaurantId && categories.length > 0 && (\n//         <div className=\"dropdown\">\n//           <label htmlFor=\"category\">Select Category:</label>\n//           <select\n//             id=\"category\"\n//             value={selectedCategoryId}\n//             onChange={(e) => {\n//               setSelectedCategoryId(e.target.value);\n//               setFoodItems([]);\n//             }}\n//           >\n//             <option value=\"\">-- Select Category --</option>\n//             {categories.map((category) => (\n//               <option key={category.id} value={category.id}>\n//                 {category.categoryName}\n//               </option>\n//             ))}\n//           </select>\n//         </div>\n//       )}\n\n//       {/* Food Items List */}\n//       {selectedCategoryId && (\n//         <div className=\"food-items-list\">\n//           <h3>Food Items</h3>\n//           {foodItems.length > 0 ? (\n//             <ul>\n//               {foodItems.map((item) => (\n//                 <li key={item.id}>\n//                   <strong>{item.foodItemName}</strong> - {item.description} - ${item.price}\n//                 </li>\n//               ))}\n//             </ul>\n//           ) : (\n//             <p>No food items available for this category.</p>\n//           )}\n//         </div>\n//       )}\n\n//       {/* Add Food Item Form */}\n//       {selectedCategoryId && (\n//         <div className=\"add-food-item\">\n//           <h3>Add New Food Item</h3>\n//           <form onSubmit={handleAddFoodItem}>\n//             <div>\n//               <label>Food Item Name:</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"foodItemName\"\n//                 value={newFoodItem.foodItemName}\n//                 onChange={handleFoodItemChange}\n//                 required\n//               />\n//             </div>\n//             <div>\n//               <label>Description:</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"description\"\n//                 value={newFoodItem.description}\n//                 onChange={handleFoodItemChange}\n//                 required\n//               />\n//             </div>\n//             <div>\n//               <label>Price:</label>\n//               <input\n//                 type=\"number\"\n//                 name=\"price\"\n//                 value={newFoodItem.price}\n//                 onChange={handleFoodItemChange}\n//                 required\n//               />\n//             </div>\n//             <div>\n//               <label>Is Available:</label>\n//               <input\n//                 type=\"checkbox\"\n//                 name=\"isAvailable\"\n//                 checked={newFoodItem.isAvailable}\n//                 onChange={(e) =>\n//                   setNewFoodItem((prev) => ({\n//                     ...prev,\n//                     isAvailable: e.target.checked,\n//                   }))\n//                 }\n//               />\n//             </div>\n//             <button type=\"submit\">Add Food Item</button>\n//           </form>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ViewFoodItem;\nvar _c;\n$RefreshReg$(_c, \"ViewFoodItem\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","ViewFoodItem","_s","restaurants","setRestaurants","categories","setCategories","foodItems","setFoodItems","selectedRestaurantName","setSelectedRestaurantName","selectedRestaurantId","setSelectedRestaurantId","selectedCategoryId","setSelectedCategoryId","error","setError","loading","setLoading","newFoodItem","setNewFoodItem","foodItemName","description","price","isAvailable","userId","localStorage","getItem","get","then","response","data","catch","console","selectedRestaurant","find","restaurant","restaurantName","id","handleFoodItemChange","e","name","value","target","prev","handleAddFoodItem","preventDefault","foodItemData","categoryId","parseInt","restaurantId","post","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","map","length","category","categoryName","item","onSubmit","type","required","checked","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/ReactJs/restaurant-orders-portal-frontened/src/components/ViewFoodItem.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './ViewFoodItem.css';\r\n\r\nconst ViewFoodItem = () => {\r\n  const [restaurants, setRestaurants] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [foodItems, setFoodItems] = useState([]);\r\n  const [selectedRestaurantName, setSelectedRestaurantName] = useState(''); // Store selected restaurant name\r\n  const [selectedRestaurantId, setSelectedRestaurantId] = useState(''); // This will hold the ID after finding it based on name\r\n  const [selectedCategoryId, setSelectedCategoryId] = useState('');\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [newFoodItem, setNewFoodItem] = useState({\r\n    foodItemName: '',\r\n    description: '',\r\n    price: '',\r\n    isAvailable: false,\r\n  });\r\n\r\n  const userId = localStorage.getItem('userId');\r\n\r\n  // Fetch restaurants by userId\r\n  useEffect(() => {\r\n    if (userId) {\r\n      setLoading(true);\r\n      axios\r\n        .get(`http://localhost:300/restaurant/restaurants/${userId}`)\r\n        .then((response) => {\r\n          setRestaurants(response.data);\r\n          setLoading(false);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching restaurants!\", error);\r\n          setError(\"Failed to load restaurants.\");\r\n          setLoading(false);\r\n        });\r\n    }\r\n  }, [userId]);\r\n\r\n  // Find restaurantId based on restaurantName\r\n  useEffect(() => {\r\n    if (selectedRestaurantName) {\r\n      const selectedRestaurant = restaurants.find(\r\n        (restaurant) => restaurant.restaurantName === selectedRestaurantName\r\n      );\r\n      if (selectedRestaurant) {\r\n        setSelectedRestaurantId(selectedRestaurant.id);\r\n      } else {\r\n        setSelectedRestaurantId('');\r\n        setCategories([]);\r\n      }\r\n    }\r\n  }, [selectedRestaurantName, restaurants]);\r\n\r\n  // Fetch categories by restaurant ID after finding the correct restaurantId\r\n  useEffect(() => {\r\n    if (selectedRestaurantId) {\r\n      setLoading(true);\r\n      axios\r\n        .get(`http://localhost:300/categories/foodCategoryByRestaurantId/${selectedRestaurantId}`)\r\n        .then((response) => {\r\n          setCategories(response.data);\r\n          setLoading(false);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching categories!\", error);\r\n          setError(\"Failed to load categories.\");\r\n          setLoading(false);\r\n        });\r\n    }\r\n  }, [selectedRestaurantId]);\r\n\r\n  // Fetch food items by categoryId when category is selected\r\n  useEffect(() => {\r\n    if (selectedCategoryId) {\r\n      setLoading(true);\r\n      axios\r\n        .get(`http://localhost:300/foodItems/foodItemsByCategoryId/${selectedCategoryId}`)\r\n        .then((response) => {\r\n          setFoodItems(response.data);\r\n          setLoading(false);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching food items!\", error);\r\n          setError(\"Failed to load food items.\");\r\n          setLoading(false);\r\n        });\r\n    }\r\n  }, [selectedCategoryId]);\r\n\r\n  // Handle input change for the new food item\r\n  const handleFoodItemChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setNewFoodItem((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  // Submit new food item\r\n  const handleAddFoodItem = (e) => {\r\n    e.preventDefault();\r\n    const foodItemData = {\r\n      ...newFoodItem,\r\n      categoryId: parseInt(selectedCategoryId),\r\n      restaurantId: parseInt(selectedRestaurantId),\r\n    };\r\n\r\n    axios\r\n      .post('http://localhost:300/foodItems/add', foodItemData)\r\n      .then((response) => {\r\n        setFoodItems([...foodItems, response.data]);\r\n        // Reset the form after successful submission\r\n        setNewFoodItem({\r\n          foodItemName: '',\r\n          description: '',\r\n          price: '',\r\n          isAvailable: false,\r\n        });\r\n        setError(null);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error adding food item!\", error);\r\n        setError(\"Failed to add food item.\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"view-food-item-container\">\r\n      <h2>View and Add Food Items</h2>\r\n\r\n      {loading && <p>Loading...</p>}\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n\r\n      {/* Restaurant Dropdown */}\r\n      <div className=\"dropdown\">\r\n        <label htmlFor=\"restaurant\">Select Restaurant:</label>\r\n        <select\r\n          id=\"restaurant\"\r\n          value={selectedRestaurantName}\r\n          onChange={(e) => {\r\n            setSelectedRestaurantName(e.target.value);\r\n            setSelectedCategoryId(''); // Reset category when restaurant changes\r\n            setCategories([]);\r\n            setFoodItems([]);\r\n          }}\r\n        >\r\n          <option value=\"\">-- Select Restaurant --</option>\r\n          {restaurants.map((restaurant) => (\r\n            <option key={restaurant.id} value={restaurant.restaurantName}>\r\n              {restaurant.restaurantName}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      {/* Category Dropdown */}\r\n      {selectedRestaurantId && categories.length > 0 && (\r\n        <div className=\"dropdown\">\r\n          <label htmlFor=\"category\">Select Category:</label>\r\n          <select\r\n            id=\"category\"\r\n            value={selectedCategoryId}\r\n            onChange={(e) => {\r\n              setSelectedCategoryId(e.target.value);\r\n              setFoodItems([]); // Reset food items when category changes\r\n            }}\r\n          >\r\n            <option value=\"\">-- Select Category --</option>\r\n            {categories.map((category) => (\r\n              <option key={category.id} value={category.id}>\r\n                {category.categoryName}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      )}\r\n\r\n      {/* Food Items List */}\r\n      {selectedCategoryId && (\r\n        <div className=\"food-items-list\">\r\n          <h3>Food Items</h3>\r\n          {foodItems.length > 0 ? (\r\n            <ul>\r\n              {foodItems.map((item) => (\r\n                <li key={item.id}>\r\n                  <strong>{item.foodItemName}</strong> - {item.description} - ${item.price}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          ) : (\r\n            <p>No food items available for this category.</p>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Add Food Item Form */}\r\n      {selectedCategoryId && (\r\n        <div className=\"add-food-item\">\r\n          <h3>Add New Food Item</h3>\r\n          <form onSubmit={handleAddFoodItem}>\r\n            <div>\r\n              <label>Food Item Name:</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"foodItemName\"\r\n                value={newFoodItem.foodItemName}\r\n                onChange={handleFoodItemChange}\r\n                required\r\n              />\r\n            </div>\r\n            <div>\r\n              <label>Description:</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"description\"\r\n                value={newFoodItem.description}\r\n                onChange={handleFoodItemChange}\r\n                required\r\n              />\r\n            </div>\r\n            <div>\r\n              <label>Price:</label>\r\n              <input\r\n                type=\"number\"\r\n                name=\"price\"\r\n                value={newFoodItem.price}\r\n                onChange={handleFoodItemChange}\r\n                required\r\n              />\r\n            </div>\r\n            <div>\r\n              <label>Is Available:</label>\r\n              <input\r\n                type=\"checkbox\"\r\n                name=\"isAvailable\"\r\n                checked={newFoodItem.isAvailable}\r\n                onChange={(e) =>\r\n                  setNewFoodItem((prev) => ({\r\n                    ...prev,\r\n                    isAvailable: e.target.checked,\r\n                  }))\r\n                }\r\n              />\r\n            </div>\r\n            <button type=\"submit\">Add Food Item</button>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewFoodItem;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import './ViewFoodItem.css';\r\n\r\n// const ViewFoodItem = () => {\r\n//   const [restaurants, setRestaurants] = useState([]);\r\n//   const [categories, setCategories] = useState([]);\r\n//   const [foodItems, setFoodItems] = useState([]);\r\n//   const [selectedRestaurantId, setSelectedRestaurantId] = useState('');\r\n//   const [selectedCategoryId, setSelectedCategoryId] = useState('');\r\n//   const [error, setError] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n\r\n//   const [newFoodItem, setNewFoodItem] = useState({\r\n//     foodItemName: '',\r\n//     description: '',\r\n//     price: '',\r\n//     isAvailable: false,\r\n//   });\r\n\r\n//   const userId = localStorage.getItem('userId');\r\n\r\n//   // Fetch restaurants by userId\r\n//   useEffect(() => {\r\n//     if (userId) {\r\n//       setLoading(true);\r\n//       axios\r\n//         .get(`http://localhost:300/restaurant/restaurants/${userId}`)\r\n//         .then((response) => {\r\n//           setRestaurants(response.data);\r\n//           setLoading(false);\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching restaurants!\", error);\r\n//           setError(\"Failed to load restaurants.\");\r\n//           setLoading(false);\r\n//         });\r\n//     }\r\n//   }, [userId]);\r\n\r\n//   // Fetch categories by restaurant ID\r\n//   useEffect(() => {\r\n//     if (selectedRestaurantId) {\r\n//       setLoading(true);\r\n//       axios\r\n//         .get(`http://localhost:300/categories/foodCategoryByRestaurantId/${selectedRestaurantId}`)\r\n//         .then((response) => {\r\n//           setCategories(response.data);\r\n//           setLoading(false);\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching categories!\", error);\r\n//           setError(\"Failed to load categories.\");\r\n//           setLoading(false);\r\n//         });\r\n//     }\r\n//   }, [selectedRestaurantId]);\r\n\r\n//   // Fetch food items by category ID\r\n//   useEffect(() => {\r\n//     if (selectedCategoryId) {\r\n//       setLoading(true);\r\n//       axios\r\n//         .get(`http://localhost:300/foodItems/${selectedCategoryId}`)\r\n//         .then((response) => {\r\n//           setFoodItems(response.data);\r\n//           setLoading(false);\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching food items!\", error);\r\n//           setError(\"Failed to load food items.\");\r\n//           setLoading(false);\r\n//         });\r\n//     }\r\n//   }, [selectedCategoryId]);\r\n\r\n//   // Handle input change for the new food item\r\n//   const handleFoodItemChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setNewFoodItem((prev) => ({\r\n//       ...prev,\r\n//       [name]: value,\r\n//     }));\r\n//   };\r\n\r\n//   // Submit new food item\r\n//   const handleAddFoodItem = (e) => {\r\n//     e.preventDefault();\r\n//     const foodItemData = {\r\n//       ...newFoodItem,\r\n//       categoryId: parseInt(selectedCategoryId),\r\n//       restaurantId: parseInt(selectedRestaurantId),\r\n//     };\r\n\r\n//     axios\r\n//       .post('http://localhost:300/foodItems/add', foodItemData)\r\n//       .then((response) => {\r\n//         setFoodItems([...foodItems, response.data]);\r\n//         // Reset the form after successful submission\r\n//         setNewFoodItem({\r\n//           foodItemName: '',\r\n//           description: '',\r\n//           price: '',\r\n//           isAvailable: false,\r\n//         });\r\n//         setError(null);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error adding food item!\", error);\r\n//         setError(\"Failed to add food item.\");\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"view-food-item-container\">\r\n//       <h2>View and Add Food Items</h2>\r\n\r\n//       {loading && <p>Loading...</p>}\r\n//       {error && <div className=\"error-message\">{error}</div>}\r\n\r\n//       {/* Restaurant Dropdown */}\r\n//       <div className=\"dropdown\">\r\n//         <label htmlFor=\"restaurant\">Select Restaurant:</label>\r\n//         <select\r\n//           id=\"restaurant\"\r\n//           value={selectedRestaurantId}\r\n//           onChange={(e) => {\r\n//             setSelectedRestaurantId(e.target.value);\r\n//             setSelectedCategoryId(''); // Reset category when restaurant changes\r\n//             setCategories([]);\r\n//             setFoodItems([]);\r\n//           }}\r\n//         >\r\n//           <option value=\"\">-- Select Restaurant --</option>\r\n//           {restaurants.map((restaurant) => (\r\n//             <option key={restaurant.id} value={restaurant.id}>\r\n//               {restaurant.restaurantName}\r\n//             </option>\r\n//           ))}\r\n//         </select>\r\n//       </div>\r\n\r\n//       {/* Category Dropdown */}\r\n//       {selectedRestaurantId && categories.length > 0 && (\r\n//         <div className=\"dropdown\">\r\n//           <label htmlFor=\"category\">Select Category:</label>\r\n//           <select\r\n//             id=\"category\"\r\n//             value={selectedCategoryId}\r\n//             onChange={(e) => {\r\n//               setSelectedCategoryId(e.target.value);\r\n//               setFoodItems([]);\r\n//             }}\r\n//           >\r\n//             <option value=\"\">-- Select Category --</option>\r\n//             {categories.map((category) => (\r\n//               <option key={category.id} value={category.id}>\r\n//                 {category.categoryName}\r\n//               </option>\r\n//             ))}\r\n//           </select>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Food Items List */}\r\n//       {selectedCategoryId && (\r\n//         <div className=\"food-items-list\">\r\n//           <h3>Food Items</h3>\r\n//           {foodItems.length > 0 ? (\r\n//             <ul>\r\n//               {foodItems.map((item) => (\r\n//                 <li key={item.id}>\r\n//                   <strong>{item.foodItemName}</strong> - {item.description} - ${item.price}\r\n//                 </li>\r\n//               ))}\r\n//             </ul>\r\n//           ) : (\r\n//             <p>No food items available for this category.</p>\r\n//           )}\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Add Food Item Form */}\r\n//       {selectedCategoryId && (\r\n//         <div className=\"add-food-item\">\r\n//           <h3>Add New Food Item</h3>\r\n//           <form onSubmit={handleAddFoodItem}>\r\n//             <div>\r\n//               <label>Food Item Name:</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name=\"foodItemName\"\r\n//                 value={newFoodItem.foodItemName}\r\n//                 onChange={handleFoodItemChange}\r\n//                 required\r\n//               />\r\n//             </div>\r\n//             <div>\r\n//               <label>Description:</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name=\"description\"\r\n//                 value={newFoodItem.description}\r\n//                 onChange={handleFoodItemChange}\r\n//                 required\r\n//               />\r\n//             </div>\r\n//             <div>\r\n//               <label>Price:</label>\r\n//               <input\r\n//                 type=\"number\"\r\n//                 name=\"price\"\r\n//                 value={newFoodItem.price}\r\n//                 onChange={handleFoodItemChange}\r\n//                 required\r\n//               />\r\n//             </div>\r\n//             <div>\r\n//               <label>Is Available:</label>\r\n//               <input\r\n//                 type=\"checkbox\"\r\n//                 name=\"isAvailable\"\r\n//                 checked={newFoodItem.isAvailable}\r\n//                 onChange={(e) =>\r\n//                   setNewFoodItem((prev) => ({\r\n//                     ...prev,\r\n//                     isAvailable: e.target.checked,\r\n//                   }))\r\n//                 }\r\n//               />\r\n//             </div>\r\n//             <button type=\"submit\">Add Food Item</button>\r\n//           </form>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ViewFoodItem;\r\n"],"mappings":"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QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACvD,EAAA,CAzPID,YAAY;AAAAoE,EAAA,GAAZpE,YAAY;AA2PlB,eAAeA,YAAY;;AAI3B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAoE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}